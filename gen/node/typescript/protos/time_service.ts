// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.1
// source: protos/time_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Timestamp } from "../google/protobuf/timestamp";

export const protobufPackage = "time";

export interface BaseResponse {
  code: number;
  message: string;
}

export interface LogInRequest {
  id: string;
  pw: string;
  logInTime?: Date | undefined;
}

export interface LogInResponse {
  base?: BaseResponse | undefined;
}

export interface LogOutRequest {
  logOutTime?: Date | undefined;
}

export interface LogOutResponse {
  base?: BaseResponse | undefined;
}

function createBaseBaseResponse(): BaseResponse {
  return { code: 0, message: "" };
}

export const BaseResponse: MessageFns<BaseResponse> = {
  encode(message: BaseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BaseResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BaseResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: BaseResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BaseResponse>, I>>(base?: I): BaseResponse {
    return BaseResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BaseResponse>, I>>(object: I): BaseResponse {
    const message = createBaseBaseResponse();
    message.code = object.code ?? 0;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseLogInRequest(): LogInRequest {
  return { id: "", pw: "", logInTime: undefined };
}

export const LogInRequest: MessageFns<LogInRequest> = {
  encode(message: LogInRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.pw !== "") {
      writer.uint32(18).string(message.pw);
    }
    if (message.logInTime !== undefined) {
      Timestamp.encode(toTimestamp(message.logInTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogInRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogInRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pw = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.logInTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogInRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      pw: isSet(object.pw) ? globalThis.String(object.pw) : "",
      logInTime: isSet(object.logInTime) ? fromJsonTimestamp(object.logInTime) : undefined,
    };
  },

  toJSON(message: LogInRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.pw !== "") {
      obj.pw = message.pw;
    }
    if (message.logInTime !== undefined) {
      obj.logInTime = message.logInTime.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LogInRequest>, I>>(base?: I): LogInRequest {
    return LogInRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LogInRequest>, I>>(object: I): LogInRequest {
    const message = createBaseLogInRequest();
    message.id = object.id ?? "";
    message.pw = object.pw ?? "";
    message.logInTime = object.logInTime ?? undefined;
    return message;
  },
};

function createBaseLogInResponse(): LogInResponse {
  return { base: undefined };
}

export const LogInResponse: MessageFns<LogInResponse> = {
  encode(message: LogInResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.base !== undefined) {
      BaseResponse.encode(message.base, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogInResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogInResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.base = BaseResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogInResponse {
    return { base: isSet(object.base) ? BaseResponse.fromJSON(object.base) : undefined };
  },

  toJSON(message: LogInResponse): unknown {
    const obj: any = {};
    if (message.base !== undefined) {
      obj.base = BaseResponse.toJSON(message.base);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LogInResponse>, I>>(base?: I): LogInResponse {
    return LogInResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LogInResponse>, I>>(object: I): LogInResponse {
    const message = createBaseLogInResponse();
    message.base = (object.base !== undefined && object.base !== null)
      ? BaseResponse.fromPartial(object.base)
      : undefined;
    return message;
  },
};

function createBaseLogOutRequest(): LogOutRequest {
  return { logOutTime: undefined };
}

export const LogOutRequest: MessageFns<LogOutRequest> = {
  encode(message: LogOutRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.logOutTime !== undefined) {
      Timestamp.encode(toTimestamp(message.logOutTime), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogOutRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogOutRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.logOutTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogOutRequest {
    return { logOutTime: isSet(object.logOutTime) ? fromJsonTimestamp(object.logOutTime) : undefined };
  },

  toJSON(message: LogOutRequest): unknown {
    const obj: any = {};
    if (message.logOutTime !== undefined) {
      obj.logOutTime = message.logOutTime.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LogOutRequest>, I>>(base?: I): LogOutRequest {
    return LogOutRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LogOutRequest>, I>>(object: I): LogOutRequest {
    const message = createBaseLogOutRequest();
    message.logOutTime = object.logOutTime ?? undefined;
    return message;
  },
};

function createBaseLogOutResponse(): LogOutResponse {
  return { base: undefined };
}

export const LogOutResponse: MessageFns<LogOutResponse> = {
  encode(message: LogOutResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.base !== undefined) {
      BaseResponse.encode(message.base, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogOutResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogOutResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.base = BaseResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogOutResponse {
    return { base: isSet(object.base) ? BaseResponse.fromJSON(object.base) : undefined };
  },

  toJSON(message: LogOutResponse): unknown {
    const obj: any = {};
    if (message.base !== undefined) {
      obj.base = BaseResponse.toJSON(message.base);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LogOutResponse>, I>>(base?: I): LogOutResponse {
    return LogOutResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LogOutResponse>, I>>(object: I): LogOutResponse {
    const message = createBaseLogOutResponse();
    message.base = (object.base !== undefined && object.base !== null)
      ? BaseResponse.fromPartial(object.base)
      : undefined;
    return message;
  },
};

export type AuthServiceService = typeof AuthServiceService;
export const AuthServiceService = {
  login: {
    path: "/time.AuthService/Login",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: LogInRequest) => Buffer.from(LogInRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => LogInRequest.decode(value),
    responseSerialize: (value: LogInResponse) => Buffer.from(LogInResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => LogInResponse.decode(value),
  },
  logOut: {
    path: "/time.AuthService/LogOut",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: LogOutRequest) => Buffer.from(LogOutRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => LogOutRequest.decode(value),
    responseSerialize: (value: LogOutResponse) => Buffer.from(LogOutResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => LogOutResponse.decode(value),
  },
} as const;

export interface AuthServiceServer extends UntypedServiceImplementation {
  login: handleUnaryCall<LogInRequest, LogInResponse>;
  logOut: handleUnaryCall<LogOutRequest, LogOutResponse>;
}

export interface AuthServiceClient extends Client {
  login(
    request: LogInRequest,
    callback: (error: ServiceError | null, response: LogInResponse) => void,
  ): ClientUnaryCall;
  login(
    request: LogInRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: LogInResponse) => void,
  ): ClientUnaryCall;
  login(
    request: LogInRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: LogInResponse) => void,
  ): ClientUnaryCall;
  logOut(
    request: LogOutRequest,
    callback: (error: ServiceError | null, response: LogOutResponse) => void,
  ): ClientUnaryCall;
  logOut(
    request: LogOutRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: LogOutResponse) => void,
  ): ClientUnaryCall;
  logOut(
    request: LogOutRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: LogOutResponse) => void,
  ): ClientUnaryCall;
}

export const AuthServiceClient = makeGenericClientConstructor(AuthServiceService, "time.AuthService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AuthServiceClient;
  service: typeof AuthServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
